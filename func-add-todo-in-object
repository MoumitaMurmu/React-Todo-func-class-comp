import React from 'react'
import { useState } from 'react';

function App() {
  // state variable to track the value
  const[myValue, setMyValue] = useState(''); //input value will be string
  // state to store the value
  const[todoList, setTodoList] = useState({}); //here we are taking empty object to store our data

  // function to track the value

  const handleChange = (e) => {
    setMyValue(e.target.value);
  }

  // function to store or append the value in todo list in object

  const handleAdd = () => {
     // Add the current value to the list object
    setTodoList((prevState) => {
      return {...prevState, [Date.now()] : myValue};
    });

    /*
    setList((prevList) => { return { ...prevList, [Date.now()]: myValue }; });: 
    This line is used when list is an object. It uses the functional form of setState,
     where the update function receives the previous state (prevList in this case) and returns the new state.
      Here, it spreads the previous state (...prevList) to retain its existing key-value pairs 
      and then adds a new key-value pair where the key is the current timestamp (Date.now())
       and the value is myValue.
    */  


// Add the current value to the list object
     // setTodoList((prevList) => {
      return { ...prevList, [parseInt(Math.random() * 100000)]: myValue };
    });

//Math.random() * 100000 generates a random integer number between 0 (inclusive) and 100000 (exclusive). This result is then used as the key in the updated state object.
     

// Clear the input field after clicking the button
     setMyValue('');
    
  }
  return (
    <div>
      <h1>Todo List For Array in function Component</h1>
      {/* Input box */}
      <input type='text' onChange={handleChange} value={myValue}/>
      <button onClick={handleAdd}>ADD</button>
      <h2>{myValue}</h2>
      <ul>
        {
          Object.entries(todoList).map(([key, value]) =>(
            <li key={key}>{key} : {value}</li>
          ))
        }
      </ul>
    </div>
  )
}

export default App;



//USING UUID FOR GENERATING UNQUE ID 
//install the uuid package. npm install uuid
//IMPORT : import { v4 as uuidv4 } from 'uuid';


import React, { useState } from 'react';
import { v4 as uuidv4 } from 'uuid';

const App = () => {
  const [myValue, setMyValue] = useState('');
  const [todoList, setTodoList] = useState({});

  const handleAddTodo = () => {
    setTodoList((prevList) => {
      const newId = uuidv4();
      return { ...prevList, [newId]: myValue };
    });
    setMyValue('');
  };

  /*
  The full form of UUID is "Universally Unique Identifier."
   A UUID is a 128-bit identifier that is standardized and designed to be unique across time and space. 
   It is often represented as a 36-character string, typically consisting of hexadecimal digits 
   separated by hyphens.

There are different versions and variants of UUIDs, 
and the most common version is known as UUIDv4, which is randomly generated. 
Other versions may use different methods to generate UUIDs.
  
Here is an example of a UUID:
550e8400-e29b-41d4-a716-446655440000

Each part of the UUID represents specific information, including the version and variant. 
The uniqueness of UUIDs is achieved by incorporating factors such as the current timestamp,
 a clock sequence, and a node identifier.

UUIDs are widely used in various contexts, 
such as database keys, distributed systems, and as unique identifiers for objects in software development.
  */ 

  return (
    <div>
      <input type='text' value={myValue} onChange={(e) => setMyValue(e.target.value)} />
      <button onClick={handleAddTodo}>Add Todo</button>
      <ul>
        {Object.entries(todoList).map(([id, todo]) => (
          <li key={id}>{id} : {todo}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;

